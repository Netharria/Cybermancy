// <auto-generated />
using System;
using Cybermancy.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cybermancy.Persistence.Migrations
{
    [DbContext(typeof(CybermancyDbContext))]
    partial class CybermancyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("Cybermancy.Domain.Attachment", b =>
                {
                    b.Property<ulong>("MessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttachmentUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MessageId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Cybermancy.Domain.Channel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsXpIgnored")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Cybermancy.Domain.Guild", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("ModChannelLog")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("Cybermancy.Domain.GuildLevelSettings", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(5);

                    b.Property<int>("Base")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(15);

                    b.Property<ulong?>("LevelChannelLog")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Modifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(50);

                    b.Property<int>("TextTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(3);

                    b.HasKey("GuildId");

                    b.ToTable("GuildLevelSettings");
                });

            modelBuilder.Entity("Cybermancy.Domain.GuildLogSettings", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("AvatarChannelLog")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("BulkDeleteChannelLog")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("DeleteChannelLog")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("EditChannelLog")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("JoinChannelLog")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("LeaveChannelLog")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("NicknameChannelLog")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("UsernameChannelLog")
                        .HasColumnType("INTEGER");

                    b.HasKey("GuildId");

                    b.ToTable("GuildLogSettings");
                });

            modelBuilder.Entity("Cybermancy.Domain.GuildModerationSettings", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(30);

                    b.Property<int>("DurationType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(3);

                    b.Property<ulong?>("MuteRole")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("PublicBanLog")
                        .HasColumnType("INTEGER");

                    b.HasKey("GuildId");

                    b.ToTable("GuildModerationSettings");
                });

            modelBuilder.Entity("Cybermancy.Domain.Lock", b =>
                {
                    b.Property<ulong>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ModeratorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("PreviousSetting")
                        .HasColumnType("INTEGER");

                    b.Property<string>("reason")
                        .HasColumnType("TEXT");

                    b.HasKey("ChannelId");

                    b.HasIndex("GuildId");

                    b.HasIndex("ModeratorId");

                    b.ToTable("Locks");
                });

            modelBuilder.Entity("Cybermancy.Domain.Message", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("GuildId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Cybermancy.Domain.Mute", b =>
                {
                    b.Property<ulong>("SinId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SinId");

                    b.HasIndex("GuildId");

                    b.HasIndex("UserId");

                    b.ToTable("Mutes");
                });

            modelBuilder.Entity("Cybermancy.Domain.OldLogMessage", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("GuildId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("OldLogMessages");
                });

            modelBuilder.Entity("Cybermancy.Domain.Pardon", b =>
                {
                    b.Property<ulong>("SinId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("ModeratorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PardonDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT");

                    b.HasKey("SinId");

                    b.HasIndex("ModeratorId");

                    b.ToTable("Pardons");
                });

            modelBuilder.Entity("Cybermancy.Domain.PublishedMessage", b =>
                {
                    b.Property<ulong>("MessageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PublishType")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("SinId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MessageId");

                    b.HasIndex("SinId", "PublishType")
                        .IsUnique();

                    b.ToTable("PublishedMessages");
                });

            modelBuilder.Entity("Cybermancy.Domain.Reward", b =>
                {
                    b.Property<ulong>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RewardLevel")
                        .HasColumnType("INTEGER");

                    b.HasKey("RoleId");

                    b.HasIndex("GuildId");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("Cybermancy.Domain.Role", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsXpIgnored")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Cybermancy.Domain.Sin", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("InfractionOn")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("ModeratorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT");

                    b.Property<int>("SinType")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("UserId");

                    b.ToTable("Sins");
                });

            modelBuilder.Entity("Cybermancy.Domain.Tracker", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("LogChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ModeratorId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("LogChannelId");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("UserId", "GuildId")
                        .IsUnique();

                    b.ToTable("Trackers");
                });

            modelBuilder.Entity("Cybermancy.Domain.User", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Cybermancy.Domain.UserLevels", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsXpIgnored")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("TimeOut")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Xp")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("GuildId", "UserId")
                        .IsUnique();

                    b.ToTable("UserLevels");
                });

            modelBuilder.Entity("GuildUser", b =>
                {
                    b.Property<ulong>("GuildsId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("UsersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GuildsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("GuildUser");
                });

            modelBuilder.Entity("Cybermancy.Domain.Attachment", b =>
                {
                    b.HasOne("Cybermancy.Domain.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Cybermancy.Domain.Channel", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("Channels")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Cybermancy.Domain.GuildLevelSettings", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithOne("LevelSettings")
                        .HasForeignKey("Cybermancy.Domain.GuildLevelSettings", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Cybermancy.Domain.GuildLogSettings", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithOne("LogSettings")
                        .HasForeignKey("Cybermancy.Domain.GuildLogSettings", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Cybermancy.Domain.GuildModerationSettings", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithOne("ModerationSettings")
                        .HasForeignKey("Cybermancy.Domain.GuildModerationSettings", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Cybermancy.Domain.Lock", b =>
                {
                    b.HasOne("Cybermancy.Domain.Channel", "Channel")
                        .WithOne("Lock")
                        .HasForeignKey("Cybermancy.Domain.Lock", "ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("LockedChannels")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.User", "Moderator")
                        .WithMany("ChannelsLocked")
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Guild");

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("Cybermancy.Domain.Message", b =>
                {
                    b.HasOne("Cybermancy.Domain.Channel", "Channel")
                        .WithMany("Messages")
                        .HasForeignKey("ChannelId");

                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("Messages")
                        .HasForeignKey("GuildId");

                    b.HasOne("Cybermancy.Domain.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId");

                    b.Navigation("Channel");

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cybermancy.Domain.Mute", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("ActiveMutes")
                        .HasForeignKey("GuildId");

                    b.HasOne("Cybermancy.Domain.Sin", "Sin")
                        .WithOne("Mute")
                        .HasForeignKey("Cybermancy.Domain.Mute", "SinId");

                    b.HasOne("Cybermancy.Domain.User", "User")
                        .WithMany("ActiveMutes")
                        .HasForeignKey("UserId");

                    b.Navigation("Guild");

                    b.Navigation("Sin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cybermancy.Domain.OldLogMessage", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("OldLogMessages")
                        .HasForeignKey("GuildId");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Cybermancy.Domain.Pardon", b =>
                {
                    b.HasOne("Cybermancy.Domain.User", "Moderator")
                        .WithMany("SinsPardoned")
                        .HasForeignKey("ModeratorId");

                    b.HasOne("Cybermancy.Domain.Sin", "Sin")
                        .WithOne("Pardon")
                        .HasForeignKey("Cybermancy.Domain.Pardon", "SinId");

                    b.Navigation("Moderator");

                    b.Navigation("Sin");
                });

            modelBuilder.Entity("Cybermancy.Domain.PublishedMessage", b =>
                {
                    b.HasOne("Cybermancy.Domain.Sin", "Sin")
                        .WithMany("PublishMessages")
                        .HasForeignKey("SinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sin");
                });

            modelBuilder.Entity("Cybermancy.Domain.Reward", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("Rewards")
                        .HasForeignKey("GuildId");

                    b.HasOne("Cybermancy.Domain.Role", "Role")
                        .WithOne("Reward")
                        .HasForeignKey("Cybermancy.Domain.Reward", "RoleId");

                    b.Navigation("Guild");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cybermancy.Domain.Role", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("Roles")
                        .HasForeignKey("GuildId");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Cybermancy.Domain.Sin", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("Sins")
                        .HasForeignKey("GuildId");

                    b.HasOne("Cybermancy.Domain.User", "Moderator")
                        .WithMany("ModeratedSins")
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.User", "User")
                        .WithMany("UserSins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("Moderator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cybermancy.Domain.Tracker", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("Trackers")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Channel", "LogChannel")
                        .WithMany("Trackers")
                        .HasForeignKey("LogChannelId");

                    b.HasOne("Cybermancy.Domain.User", "Moderator")
                        .WithMany("TrackedUsers")
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.User", "User")
                        .WithMany("Trackers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("LogChannel");

                    b.Navigation("Moderator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cybermancy.Domain.UserLevels", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("UserLevels")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GuildUser", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", null)
                        .WithMany()
                        .HasForeignKey("GuildsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cybermancy.Domain.Channel", b =>
                {
                    b.Navigation("Lock");

                    b.Navigation("Messages");

                    b.Navigation("Trackers");
                });

            modelBuilder.Entity("Cybermancy.Domain.Guild", b =>
                {
                    b.Navigation("ActiveMutes");

                    b.Navigation("Channels");

                    b.Navigation("LevelSettings");

                    b.Navigation("LockedChannels");

                    b.Navigation("LogSettings");

                    b.Navigation("Messages");

                    b.Navigation("ModerationSettings");

                    b.Navigation("OldLogMessages");

                    b.Navigation("Rewards");

                    b.Navigation("Roles");

                    b.Navigation("Sins");

                    b.Navigation("Trackers");

                    b.Navigation("UserLevels");
                });

            modelBuilder.Entity("Cybermancy.Domain.Message", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Cybermancy.Domain.Role", b =>
                {
                    b.Navigation("Reward");
                });

            modelBuilder.Entity("Cybermancy.Domain.Sin", b =>
                {
                    b.Navigation("Mute");

                    b.Navigation("Pardon");

                    b.Navigation("PublishMessages");
                });

            modelBuilder.Entity("Cybermancy.Domain.User", b =>
                {
                    b.Navigation("ActiveMutes");

                    b.Navigation("ChannelsLocked");

                    b.Navigation("Messages");

                    b.Navigation("ModeratedSins");

                    b.Navigation("SinsPardoned");

                    b.Navigation("TrackedUsers");

                    b.Navigation("Trackers");

                    b.Navigation("UserSins");
                });
#pragma warning restore 612, 618
        }
    }
}
